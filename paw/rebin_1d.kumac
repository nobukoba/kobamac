***************************************** 
* A macro to rebin in x axis
*
* Usage: exe <macro directory>/rebin_1d.kumac HID_IN HID_OUT NBINS
*
* After execution of this macro, new histogram
* with id of HID_OUT is created in the //PAWC memory.
* 
* For your information,
*    $HEXIST(id)  .................  1 if histogram ID exists or 0 otherwise
*    $HINFO(id,'1DHISTO')  ........  1 if ID is a 1D histogram or 0 otherwise
*    $HINFO(id,'2DHISTO')  ........  1 if ID is a 2D histogram or 0 otherwise
*    $HINFO(id,'XBINS')  ..........  Number of bins in X direction
*    $HINFO(id,'XMIN')  ...........  Lower histogram limit in X direction
*    $HINFO(id,'XMAX')  ...........  Upper histogram limit in X direction
*    $HINFO(id,'YBINS')  ..........  Number of bins in Y direction
*    $HINFO(id,'YMIN')  ...........  Lower histogram limit in Y direction
*    $HINFO(id,'YMAX')  ...........  Upper histogram limit in Y direction
*    $VEXIST(VNAME)  ..............  Index of vector VNAME
*                                    (1..$NUMVEC or 0 if VNAME does not exist)
* 
* Also see PAW Reference Manual
* (e.g., http://www.hep.vanderbilt.edu/~focuser/reference_manual/index.html)
* Nobu Kobayashi 14 Jun., 2020
*****************************************
 
 macro main [hid1] [hid2] [nbins]
   if (([hid1] .eq. '') .or. ([hid2] .eq. '') .or. ([nbins] .eq. '')) then
     mess
     mess Usage: exe <macro directory>/rebin_1d.kumac HID_IN HID_OUT NBINS
     mess
     exitm
   endif
   
* If the histogram with hid is not loaded in a memory,
* load it.
   if ($hexist([hid1]) .eq. 0) then
     hrin [hid1]
   endif
* If the histogram is not 2D, terminate this macro.
   if ($hinfo([hid1],'1DHISTO') .ne. 1) then
     mess The histogram is not 1D.
     exitm
   endif
   
* Delete temporary vectors created in the previous execution of this macro
   if ($vexist(con_vec1) .eq. 1) then
     vec/del con_vec1
   endif
   if ($vexist(err_vec1) .eq. 1) then
     vec/del err_vec1
   endif
   if ($vexist(con_vec2) .eq. 1) then
     vec/del con_vec2
   endif
   if ($vexist(err_vec2) .eq. 1) then
     vec/del err_vec2
   endif
   
   xmin   = $hinfo([hid1],'XMIN')
   xmax   = $hinfo([hid1],'XMAX')
   xbins1 = $hinfo([hid1],'XBINS')
   dx1    = (([xmax]) - ([xmin]))/([xbins1])
   xbins2 = [nbins]
   dx2    = (([xmax]) - ([xmin]))/([xbins2])
* Create temporary vectors to store the contents of the histogram
   vec/cre con_vec1([xbins1]) r
   vec/cre err_vec1([xbins1]) r
   get/con [hid1] con_vec1
   get/err [hid1] err_vec1
   
* Remove the histogram with hid = hid2, if it exists
   if ($hexist([hid2]) .eq. 0) then
     hrin [hid2]
   endif
   if ($hexist([hid2])) then
     mess Histogram ID: [hid2] already exists
     mess Remove HID: [hid2]
   endif
   
   vec/cre con_vec2([xbins2]) r
   vec/cre err_vec2([xbins2]) r
   i2_cur = 1
   do i1 = 1, [xbins1]
     xlow1 = ([i1] - 1) * ([dx1]) + ([xmin])
     xup1  = ([i1]) * ([dx1]) + ([xmin])
     con1 = con_vec1([i1])
     err1 = err_vec1([i1])
     do i2 = [i2_cur], [xbins2]
       xlow2 = ([i2] - 1) * ([dx2]) + ([xmin])
       xup2  = ([i2]) * ([dx2]) + ([xmin])
       fac = 1
       if ([xlow1] .lt. [xlow2]) then
	 fac = ([fac]) - ((([xlow2])-([xlow1])) / [dx1])
       endif
       if ([xup1] .gt. [xup2]) then
	 fac = ([fac]) - ((([xup1])-([xup2])) / [dx1])
       endif
       if (([xlow1] .eq. [xup2]) .or. ([xup1] .eq. [xlow2])) then
	 fac = 0
       endif
* mess i1 i2 fac [i1] [i2] [fac]
       con2 = con_vec2([i2])
       err2 = err_vec2([i2])
       sum_con = ([con2]) + ([fac])*([con1])
       sum_err = $sigma(sqrt(([err2])**2 + (([fac])*([err1]))**2))
       vec/input con_vec2([i2]) [sum_con]
       vec/input err_vec2([i2]) [sum_err]
       if ([xup1] .le. [xup2]) then
	 i2_cur = [i2]
	 breakl
       endif
     enddo
   enddo
   1d [hid2] $HTITLE([hid1]) [xbins2] [xmin] [xmax]
   put/con [hid2] con_vec2
   put/err [hid2] err_vec2
 return
 
