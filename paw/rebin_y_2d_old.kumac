***************************************** 
* A macro to rebin in y axis
*
* Usage: exe <macro directory>/rebin_y.kumac HID_IN HID_OUT NBINS
*
* After execution of this macro, new histogram
* with hid = 9999 is created in the //PAWC memory.
* 
* For your information,
*    $HEXIST(id)  .................  1 if histogram ID exists or 0 otherwise
*    $HINFO(id,'1DHISTO')  ........  1 if ID is a 1D histogram or 0 otherwise
*    $HINFO(id,'2DHISTO')  ........  1 if ID is a 2D histogram or 0 otherwise
*    $HINFO(id,'XBINS')  ..........  Number of bins in X direction
*    $HINFO(id,'XMIN')  ...........  Lower histogram limit in X direction
*    $HINFO(id,'XMAX')  ...........  Upper histogram limit in X direction
*    $HINFO(id,'YBINS')  ..........  Number of bins in Y direction
*    $HINFO(id,'YMIN')  ...........  Lower histogram limit in Y direction
*    $HINFO(id,'YMAX')  ...........  Upper histogram limit in Y direction
*    $VEXIST(VNAME)  ..............  Index of vector VNAME
*                                    (1..$NUMVEC or 0 if VNAME does not exist)
* Also see http://paw.web.cern.ch/paw/reference_manual/KUIP.html#K:FUNCTI 
* 27 Aug., 2019 Nobu Kobayashi
*****************************************
 
 macro main [hid1] [hid2] [nbins]
   if (([hid1] .eq. '') .or. ([hid2] .eq. '') .or. ([nbins] .eq. '')) then
     mess
     mess Usage: exe <macro directory>/rebin_y.kumac HID_IN HID_OUT NBINS
     mess
     exitm
   endif
   
* If the histogram with hid is not loaded in a memory,
* load it.
   if ($hexist([hid1]) .eq. 0) then
     hrin [hid1]
   endif
* If the histogram is not 2D, terminate this macro.
   if ($hinfo([hid1],'2DHISTO') .ne. 1) then
     mess The histogram is not 2D.
     exitm
   endif
   
* Delete temporary vectors created in the previous execution of this macro
   if ($vexist(con_vec1) .eq. 1) then
     vec/del con_vec1
   endif
   if ($vexist(err_vec1) .eq. 1) then
     vec/del err_vec1
   endif
   if ($vexist(con_vec2) .eq. 1) then
     vec/del con_vec2
   endif
   if ($vexist(err_vec2) .eq. 1) then
     vec/del err_vec2
   endif
   
   xmin   = $hinfo([hid1],'XMIN')
   xmax   = $hinfo([hid1],'XMAX')
   xbins  = $hinfo([hid1],'XBINS')
   dx     = (([xmax]) - ([xmin]))/([xbins])
   ymin   = $hinfo([hid1],'YMIN')
   ymax   = $hinfo([hid1],'YMAX')
   ybins1 = $hinfo([hid1],'YBINS')
   dy1    = (([ymax]) - ([ymin]))/([ybins1])
   ybins2 = [nbins]
   dy2    = (([ymax]) - ([ymin]))/([ybins2])
* Create temporary vectors to store the contents of the histogram
   vec/cre con_vec1([xbins],[ybins1]) r
   vec/cre err_vec1([xbins],[ybins1]) r
   get/con [hid1] con_vec1
   get/err [hid1] err_vec1
   
* Remove the histogram with hid = hid2, if it exists
   if ($hexist([hid2]) .eq. 0) then
     hrin [hid2]
   endif
   if ($hexist([hid2])) then
     mess Histogram HID: [hid2] already exists
     mess Exit the macro
     exitm
   endif
   vec/cre con_vec2([xbins],[ybins2]) r
   vec/cre err_vec2([xbins],[ybins2]) r
   
   do i = 1, [xbins]
     j1 = 1
     do j2 = 1, [ybins2]
       ylow2 = ([j2] - 1) * ([dy2]) + ([ymin])
       yup2  = ([j2]) * ([dy2]) + ([ymin])
       sum_con = 0.
       sum_err = 0.
       while ([j1] .le. [ybins1]) do
	 ylow1 = ([j1] - 1) * ([dy1]) + ([ymin])
	 yup1  = ([j1]) * ([dy1]) + ([ymin])
	 con = con_vec1([i],[j1])
	 err = err_vec1([i],[j1])
	 yfac = 1
	 if ([yup1] .gt. [yup2]) then
	   yfac = 1 - ((([yup1])-([yup2])) / [dy1])
	 endif
	 if ([ylow1] .lt. [ylow2]) then
	   yfac = ([yfac]) - ((([ylow2])-([ylow1])) / [dy1])
	 endif
	 sum_con = ([sum_con]) + ([yfac])*([con])
	 sum_err = $sigma(([sum_err])**2 + (([yfac])*([err]))**2)
	 if ([yup1] .gt. [yup2]) then
	   breakl
	 endif
	 j1 = [j1] + 1
       endwhile
       vec/input con_vec2([i],[j2]) [sum_con]
       vec/input err_vec2([i],[j2]) [sum_err]
     enddo
   enddo
   2d [hid2] $HTITLE([hid1]) [xbins] [xmin] [xmax] [ybins2] [ymin] [ymax]
   put/con [hid2] con_vec2
   put/err [hid2] err_vec2
 return
 
